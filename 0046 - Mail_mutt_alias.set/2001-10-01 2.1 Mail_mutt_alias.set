"===============================================================
" Vim script file
" 
" File          : Mail_mutt_alias.set
" Author        : Luc Hermitte <hermitte@free.fr>
"                 <URL:http://hermitte.free.fr/vim/>
" Last update   : 02nd oct 2001
"
" Purpose       : extract an alias from the aliases file : ~/.mutt/aliases_file
"
"------------------------------------------------------------
"
" Use           : In normal mode  -> ,Ca the_alias
"                 In command mode -> :Ca the_alias
"
" Alternative way: In insert mode, enter <tab> after the pattern of an
" alias. If only one alias matches the current pattern, the pattern will be
" replaced by the corresponding alias. If severall patterns match, a choice
" will be given in a split window.
"
" Rem: 
" (*) <tab> has is classical effect on non-address lines (i.e.: not To:,
"     Cc: and Bcc: lines).
" (*) needs <a.vim> ; cf <http://vim.sf.net/scripts>
" (*) Many functions stolen to the file <grep.vim> authored by Ron Aaron
"     and extended by Zdenek Sekera.
" (*) VIM version needed : works fine with VIM 5.7.
"
"===============================================================
func! GrepAlias(the_alias)
    " TODO: execute le grep et le stocke dans une variable... un peu lourd,
    " devrait y avoir une manière plus légére de réaliser cela...
    exe 'r!grep "alias[\t ]*' . a:the_alias . '" '.expand('$HOME'). '/.mutt/aliases_file'
    let line = getline(line("."))
    " remove the inserted lines
    undo
    let msk = 'alias\s*' . a:the_alias 
    let msk = msk . '\s*\(\(\s*[^< \t]\+\)\+\)\s*<\(.*\)>'
    return substitute( line, msk, ' \1 <\3>', '')
endf

func! AppendAlias(the_alias)
    let lnum = line(".")
    let addr = GrepAlias(a:the_alias)
    let line = getline(lnum)
    call setline( lnum, line . addr )
endf

command! -nargs=1 Ca :call AppendAlias(<q-args>)
noremap ,Ca :Ca 

" ===========================================================================
" <tab> and menu "way"
source <sfile>:p:h/a.vim

"----------------------------------------
" Mapping of <tab>
" Rem: the expression is complex, but <cword> is not really adapted
inoremap <tab> <esc>mzviw"zy`za<c-r>=MuttAlias_MapTab('<c-r>z')<cr>

"----------------------------------------
" Extract the address from an MTT-alias line
function! MuttAlias_Addr(the_line)
  "let msk = 'alias\s\+[^\t]\+' 
  let msk = 'alias\s\+\S\+\s\+' 
  "let msk = msk . '\(\(\s*[^< \t]\+\)\+\)\=\s*<\(.*\)>'
  "return substitute( a:the_line, msk, '\1 <\3>', '')
  return substitute( a:the_line, msk, '', '')
endfunction

" Main function
function! GrepAlias2(the_alias)
  let buffername = $HOME . '/tmp/search-results-aliases'
  call FindOrCreateBuffer(buffername,1)	" from a.vim
  normal 1GdG
  0 put = '#Aliases corresponding to the current pattern : <'.a:the_alias . '>'
  1 put = '#Press ENTER or dlb-click on an alias to use it.'
  2 put = '#-------------------------------------------------------------------'
  3 put = '-none-of-these-'
  exe '$r!grep "alias[\t ]*' . a:the_alias . '" ' .expand('$HOME'). '/.mutt/aliases_file'
  g/^$/ d
  let results = line('$')
  " No result
  if results == 4
    bd!
    echohl ErrorMsg
    echo "\r" . 'No alias matching <'.a:the_alias.'>'
    echohl None
    return "\<esc>a"
  " Only one result
  elseif results == 5
    let addr = getline(line('$'))
    bd!
    return "\<esc>viwc".MuttAlias_Addr(addr)
  endif
  " Default return
  1,$s/alias //
  "call MuttAlias_Syntax()
  call MuttAlias_Syntax(a:the_alias)

  return "\<esc>"
  " Appel de grep syntax
endfunction


"----------------------------------------
" Local mappings

func! MuttAliases_GrepEditFileLine(lineNum)
   if a:lineNum > 3
      let line = getline(a:lineNum)
      if (line != "-none-of-these-")
	 let addr = MuttAlias_Addr('alias '.line)
         bd!
	 " Trick to not expand '\t'
	 exe "noremap ¡M_ALIAS! viwc".addr."\<esc>"
	 normal ¡M_ALIAS!
	 unmap ¡M_ALIAS!
	 "exe "normal viwc".addr."\<esc>"
      else
         bd!
         echo "\r"
      endif
   endif
endfunc

func! MuttAliases_GrepEnterBuf()
   " map <enter> to edit a file, also dbl-click
   nnoremap <cr>          :call MuttAliases_GrepEditFileLine(line("."))<cr>
   nnoremap <2-LeftMouse> :call MuttAliases_GrepEditFileLine(line("."))<cr>
endfunc

func! MuttAliases_GrepLeaveBuf()
    unmap <cr>
    unmap <2-LeftMouse>
endfunc

aug MuttAliases_GrepBuf
    au!
    au BufEnter search-results-* call MuttAliases_GrepEnterBuf()
    au BufLeave search-results-* call MuttAliases_GrepLeaveBuf()
    ""au VimLeavePre * call GrepCleanup()
aug END

"----------------------------------------
" Looks if the header-field of the current line is either To:, Cc: or Bcc:
function! MuttAlias_MapTab(the_alias)
  if a:the_alias !~ '^\k*$'
    ""echo "-" . a:the_alias . "-\n"
    return "\t"
  endif
  let ok = '^\(\(T[Oo]\)\|\(B\=[Cc][Cc]\)\):'
  let l = line('.')
  while l != 0
    let ll = getline(l)			" Current line
    if ll =~ '^\S\+:'			" ¿ Is an field ?
      if ll =~ ok			"   ¿ Is an address field ?
	"return GrepAlias2(a:the_alias)	"     Then grep the alias
	let r = GrepAlias2(a:the_alias)	"     Then grep the alias
	if "\<esc>a" != r 
	  return r
	else 
	  return r."\<right>\t"
	endif
      else
	return "\t"			"     Otherwise return <tab>
      endif
    else
      let l = l - 1			"   Otherwise, test previous line
    endif
  endwhile
endfunction

"----------------------------------------
function! MuttAlias_Syntax(...)
  if has("syntax")
    syn clear

    if a:0 > 0
      exe 'syntax region GrepFind start=+\(^\|<\)+ end=/' . a:1 . '>\=/'
    endif
    
    syntax region GrepLine  start='.' end='$' contains=GrepAlias
    syntax match GrepAlias /^\S\+/ contained nextgroup=GrepName contains=GrepFind
    syntax match GrepName /[^<]\+/ contained nextgroup=GrepAddress
    syntax region GrepAddress start='<' end='>' contained 
    
    syntax region GrepExplain start='#' end='$' contains=GrepStart,GrepFind
    syntax match GrepStart /#/ contained
    syntax match Statement /-none-of-these-/

    highlight link GrepFind Search
    highlight link GrepStart Ignore
    highlight link GrepLine Normal
    highlight link GrepAlias SpecialChar
    highlight link GrepAddress Identifier
  endif
endfunction
