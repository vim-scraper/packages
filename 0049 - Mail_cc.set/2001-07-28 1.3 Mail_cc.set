"===============================================================
" Function that deletes one's e-mail adress from the Cc: list 
" Redundant with the metto option within mutt.
"
" File          : Mail_cc.set
" Author        : Luc Hermitte <hermitte@free.fr>
"                 <URL:http://hermitte.free.fr/vim/>
" Last update   : 10th april 2001
"
"
" How To Use It :
"   It order to use it, you will have to :
"   - First update 'user' and 'domain' to be your username/login and 'domain'
"     your domain. The address is consider to be in one of the following
"     forms : 
"     * Fisrt LAST    <login@host.domain.type>
"     * "Fisrt LAST"  <login@host.domain.type>
"     * "LAST, Fisrt" <login@host.domain.type>
"     *               <login@host.domain.type>
"     *                login@host.domain.type 
"     * etc.
"   - and then, just source this file when loading the reply.
"   
" Changes       :
"                * Version 1.3
"                  - Handle when "Cc: log@host@domain.type\n log2@host2 ..."
"                * Version 1.2b
"                  - Fix a small bug
"                * Version 1.2
"                  - Clear line when there was just this email on the line
"                  - Handle when last address on last line ',\n <email>'
"                  - Parses only the Cc: field
"                * Version 1.1
"                  - Enable Names written like '"Hermitte, Luc"'
"                  - Enables addresses in the form '<user@host.domain>' and
"                    'user@host.domain'
"                  - 'user' and 'domain' are now more accessible and not
"                    hidden within a complex regular expression
"                * Version 1.0
"                  - first version
"
"===============================================================
"
func! DelFromCC( ) range
    " Prepare variables...
    let user   = 'hermitte'
    let domain = '\(\(free\)\|\(laas\)\)\.fr'
    let addr   = '<\=' . user . '@[\w.]*' . domain . '>\=\s*'
    " [^@:,[:space:]] followed by [^@:,]* (in mail) ensures to keep the
    " same alignment when the e-mail deleted was the first one on its line.
    let mail   = '\(\("[^"]\+"\s*\)\|\([^@:,[:space:]][^@:,]*\s*\)\)\=' . addr
    let form1  = '\(\([Cc][Cc]: \)\|,\)\s*' . mail . "$"
    let form2  = mail . ',\s*'
    " Retrieve the first paragraph
    normal 1Gvip
    " Get the begining of the Cc: header
    /^[cC][cC]: /
    let i = line (".")
    " Get the end of the Cc: header
    /^\([[:alnum:]-]\+: \)\|^$/
    let e = line (".")
    " On all lines of the Cc: header, DO:
    while (i < e)
        " Get current ligne
        let line = getline(i)
        " Search for the line with the occurence of the e-mail adress
        if line =~ mail
            " Line found
            " Delete the first form ",?<adress>$"
            let line = substitute( line, form1, '\2', '' )
            " Delete the second form : "<adress>, "
            let line = substitute( line, form2, '', '' )
            " -- case last email, alone on the last Cc: line
            " Check if still  ",\n mail$" 
            if line =~ mail
              let line = substitute( line, mail . '\s*$', '', '' )
              " Clear the comma on the previous line
              call setline( i-1, substitute( getline(i-1), ',\s*$', '', '' ) )
              " If we have now "Cc:\s*\n adr2", merge the two lines
            elseif line =~ '^Cc:\s*$'
              if getline(i+1) !~ '^[[:alnum:]]\s+:'
                " Join the two lines
                let line = 'Cc: ' . substitute( getline(i+1), '^\s*', '', '' ) 
                let j = i + 1
                exe 'normal V' . j . 'GddV'
              endif
            endif
            " Finally : replace or delete the line then exit
            if line =~ '^\s*$'
              " Delete the empty line
              exe 'normal V' . i . 'Gdd'
            else
              " Replace the line
              call setline( i, line )
              normal V
            endif
            " Exit
            return
        endif
        " Next line
        let i = i + 1
    endw
    normal V
endf

"===============================================================
" Automatically calls the function on the first paragraph of the text, in
" the case of an email, it corresponds to the headers section
call DelFromCC()
